syntax = "proto3";

option go_package = "rpc/pb";

package relation;

import "user.proto";

//  关系操作 关注或取消

message RelationActionRequest {
  string token = 1;       // 用户鉴权token
  int64 to_user_id = 2;   // 对方用户id
  int32 action_type = 3;  // 1-关注，2-取消关注
}
message RelationActionResponse {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
}


//  用户关注列表

message RelationFollowListRequest {
  int64 user_id = 1;  // 用户id
  string token = 2;   // 用户鉴权token
}
message RelationFollowListResponse {
  int32 status_code = 1;              // 状态码，0-成功，其他值-失败
  string status_msg = 2;              // 返回状态描述
  repeated user.User user_list = 3;   // 用户信息列表
}

//  用户粉丝列表

message RelationFollowerListRequest {
  int64 user_id = 1;  // 用户id
  string token = 2;   // 用户鉴权token
}
message RelationFollowerListResponse {
  int32 status_code = 1;              // 状态码，0-成功，其他值-失败
  string status_msg = 2;              // 返回状态描述
  repeated user.User user_list = 3;   // 用户列表
}

//  用户好友列表

message RelationFriendListRequest{
  int64 user_id = 1;  // 用户id
  string token = 2;   // 用户鉴权token
}
message RelationFriendListResponse{
  int32 status_code = 1;              // 状态码，0-成功，其他值-失败
  string status_msg = 2;              // 返回状态描述
  repeated FriendUser user_list = 3;  // 用户列表
}

message FriendUser {
  string message = 1;         // 和该好友的最新聊天消息
  int64 msgType = 2;          // message消息的类型，0 => 当前请求用户接收的消息， 1 => 当前请求用户发送的消息
  user.User self = 3;         // 用户本人
}

//  rpc impl

service RelationService {
  rpc RelationAction(RelationActionRequest)returns(RelationActionResponse) {}
  rpc RelationFollowList(RelationFollowListRequest)returns(RelationFollowListResponse) {}
  rpc RelationFollowerList(RelationFollowerListRequest)returns(RelationFollowerListResponse) {}
  rpc RelationFriendList(RelationFriendListRequest)returns(RelationFriendListResponse) {}
}
